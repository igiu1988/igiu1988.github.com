<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[发疯的猫的博客]]></title>
  <link href="http://igiu1988.github.io/atom.xml" rel="self"/>
  <link href="http://igiu1988.github.io/"/>
  <updated>2013-06-06T12:13:05+08:00</updated>
  <id>http://igiu1988.github.io/</id>
  <author>
    <name><![CDATA[汪洋]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CoreText-介绍]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/05/coretext-introduction/"/>
    <updated>2013-06-05T16:05:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/05/coretext-introduction</id>
    <content type="html"><![CDATA[<!--more-->


<h1>介绍</h1>

<p>Core Text是一门为了实现文字排版和控制字体的高级底层技术。它以高性能及易用性为基本标准进行设计。Core Text API适用于OS X v10.5以后版本，在所有的的这些OS X系统应用环境中都可以使用。在iOS3.2及以后版本也同样适用。</p>

<p>Core Text 布局引擎(layout engine)是专门设计用来使文字布局操作更简单和避免副作用而设计。<strong><em>既然Core Text能够实现文字排版和控制字体，那么它内部就会有布局引擎（实现排版）和字体编程接口（控制字体）</em></strong>。Core Text字体编程接口(font programming interface)与Core Text布局引擎是互补的，它们是被设计用于能够原生地处理Unicode编码字体，统一不同的OS X字体设备成一个独立且全面的编程接口。</p>

<p>该文档适用于那些想在底层进行文字布局操作和字体处理的开发者。如果你想使用高封装接口(using higher-level construct)来开发应用，比如NSTextView(<strong><em>这是一个OS X的控件，并不适用于iOS，iOS里有UITextView，不过UITextView照NSTextView差得太多了，只能说UITextView是简单封装，不过在iOS6之后的UITextView就好多了，支持NSAttributedString了</em></strong>)，那么你应该使用Cocoa text 系统，具体介绍可以查看Text System Overview。如果并不想使用高封装接口，你想自己在Core Graphics context上渲染文字，那么你就要使用Core Text。</p>

<h1>文档组织</h1>

<p>该文档以如下章节组织</p>

<p>“Core Text 概述”：该章在设计目的和功能点方面介绍了Core Text系统。同样也介绍了系统中中些不透明类型(opaque types)，这些类型封装了文字布局和字体处理功能。
“常用操作(<strong><em>Common Operation</em></strong>)”: 提供了一些代码段和注释，用来示例主要的Core Text不透明类型的主要用法。</p>

<h1>参见</h1>

<p>除了这篇文档，还有一些其它的文档覆盖了关于Core Text的更多方面或者描述了Core Text所使用的软件服务。</p>

<ul>
<li>Core Text Reference Collection 为Core Text布局和字体API提供了完整的参考信息.</li>
<li>CoreTextTest 示例项目，它展示了在完整的应用(a complete Carbon application)的内部中如何使用Core Text。</li>
<li>CoreTextArcCocoa 示例项目，它示范了在Core Text Cocoa 应用中如何使用fonts, lines, runs。</li>
<li>Core Foundation Design Concepts 和 Core Foundation Framework Reference 描述了Core Foundation，Core Foundation是一个提供了通用数据类型抽象和Core Text所用到的基本软件服务的框架</li>
</ul>


<p>下面的文件提供了到讲解Cocoa text system文档切入点</p>

<ul>
<li>Text System Overview介绍了Cocoa text system.</li>
<li>Text Layout Programming Guide for Cocoa讲解了Cocoa text布局引擎</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[准备翻译CoreText]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/05/prepare-to-translate-core-text/"/>
    <updated>2013-06-05T16:03:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/05/prepare-to-translate-core-text</id>
    <content type="html"><![CDATA[<p>TMD，觉得要是在这里竟写一些别人都说过的东西也太没意思了，不过自己也很菜，写不出什么原创，干脆翻译些什么吧。于是乎准备翻译一下Core Text Programming Gudie，把Overview翻译完，就发布博客，要不都没啥原创不敢发布啊</p>

<p>英语侥幸过了四级，只比及格线多6分，这两年也没有额外学习英语，翻译出来的东西如果能有幸让大家看到，并且哪怕只是帮助到大家一点点，那我也算积德了。</p>

<p>翻译中加了自己的一些话，我用<strong><em>斜体</em></strong>以区分，加上自己的一些话是觉得这样写应该更易于理解。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Core Data 入门]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/04/ios-core-data-guide/"/>
    <updated>2013-06-04T15:29:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/04/ios-core-data-guide</id>
    <content type="html"><![CDATA[<p>做了一年多iOS开发，真没怎么用过Core Data，来新公司一直没有活，就看Core Data了。网上一搜一大把关于Core Data的教程，我以我自己的方式重新再说一次，如看不懂就再自己搜索吧。</p>

<p>Core Data不是数据库，只是对SQLite的封装，集成了很多内容，高效。</p>

<p>我新建了一个类，SQLManager : NSObject</p>

<p>添加了一个类方法，目的是全局使用一个SQLManager对象</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SQLManager</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedSQLManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">id</span> <span class="n">shareInstance</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">shareInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">shareInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Core Data涉及三个对象是肯定每次都要用的的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="n">managedObjectModel</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">managedObjectContext</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="n">persistentStoreCoordinator</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用一个initCoreData来初始化这三个对象（SQLManager的属性）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initCoreData</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 既然涉及数据库，肯定要有一个文件来存储数据</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">paths</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">basePath</span> <span class="o">=</span> <span class="p">[</span><span class="n">paths</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">storeUrl</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">fileURLWithPath:</span><span class="p">[</span><span class="n">basePath</span> <span class="nl">stringByAppendingPathComponent:</span><span class="s">@&quot;TestDB.sqlite&quot;</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 初始化 managedObjectModel </span>
</span><span class='line'><span class="cm">     * managedObjectModel 的初始化是依据工程中的xcdatamodeld文件，</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">_managedObjectModel</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSManagedObjectModel</span> <span class="nl">mergedModelFromBundles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 初始化 persistentStoreCoordinator</span>
</span><span class='line'><span class="cm">     * persistentStoreCoordinator 的初始化需要刚才的 managedObjectModel，这里我添加了一个option，该option会在数据库的版本控制及轻量迁移中用到。</span>
</span><span class='line'><span class="cm">     * 数据库的版本控制及轻量迁移见另一篇文章: iOS Core Data Version</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// option use for lightweight migration</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">option</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span>
</span><span class='line'>                             <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="n">NSMigratePersistentStoresAutomaticallyOption</span><span class="p">,</span>
</span><span class='line'>                             <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="n">NSInferMappingModelAutomaticallyOption</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_persistentStoreCoordinator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSPersistentStoreCoordinator</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithManagedObjectModel:</span><span class="n">_managedObjectModel</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">_persistentStoreCoordinator</span> <span class="nl">addPersistentStoreWithType:</span><span class="n">NSSQLiteStoreType</span> <span class="nl">configuration:</span><span class="nb">nil</span> <span class="nl">URL:</span><span class="n">storeUrl</span> <span class="nl">options:</span><span class="n">option</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@: %@&quot;</span><span class="p">,</span> <span class="p">[[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">infoDictionary</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;CFBundleDisplayName&quot;</span><span class="p">],</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 初始化 managedObjectContext</span>
</span><span class='line'><span class="cm">     * managedObjectContext 的初始化需要上面的 persistentStoreCoordinator</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">_managedObjectContext</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_managedObjectContext</span><span class="p">.</span><span class="n">persistentStoreCoordinator</span> <span class="o">=</span> <span class="n">_persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考文档：</p>

<ul>
<li>Core Data Basics</li>
<li>Core Data Programming Gudie</li>
<li>google及baidu的各种搜索</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iMac蓝牙与wifi信号]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/04/bluetooth-and-wifi-in-imac/"/>
    <updated>2013-06-04T13:42:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/04/bluetooth-and-wifi-in-imac</id>
    <content type="html"><![CDATA[<p>在新公司终于使用上了iMac，甚是高兴，可是用着用着发现magic mouse总是掉帧，输入文字时偶尔也会变得很卡，鼠标的问题尤为严重，于是google之，的确有同样的问题。其中有一个帖子说是与其用的wifi信号频道（强度）有关系，于是将iMac连接到了公司的另一个wifi信号上，果然蓝牙设备不再掉帧了。具体原因我说不清，只提供一些证据</p>

<ul>
<li>iMac型号MD093CH/A，使用的无线芯片是Broadcom BCM43xx，集成了wifi与bluetooth</li>
<li>先前的wifi信号强度是-52dBm，后来的wifi信号强度是-26dBm</li>
<li>查看蓝牙设备的RSSI，基本都在-52dBm上下波动</li>
</ul>

]]></content>
  </entry>
  
</feed>
