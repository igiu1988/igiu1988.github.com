<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[胖子汪洋的博客]]></title>
  <link href="http://igiu1988.github.io/atom.xml" rel="self"/>
  <link href="http://igiu1988.github.io/"/>
  <updated>2013-07-25T12:28:41+08:00</updated>
  <id>http://igiu1988.github.io/</id>
  <author>
    <name><![CDATA[汪洋]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Core Animation Notes 1]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/28/core-animation-notes-1/"/>
    <updated>2013-06-28T08:49:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/28/core-animation-notes-1</id>
    <content type="html"><![CDATA[<h2>废话</h2>

<p>看Core Animation相关的例子不下10次，只有最近一次才看得算是明白，然后又看了一点文档。我不是什么爱学习的人，也不想特意去先学习点什么东西以便留着以后用。我只是碰到了，我就看，看不明白拉倒，哪天碰到了再看，总有一天能看明白。</p>

<p>瞅了一眼Core Animation Basics，看完就忘记了，不得已一边再看一遍文档，一边写文章了。</p>

<h2>上一段代码</h2>

<p>经常的，想实现一个动画，或者只是想看看这个动画怎么写的布局，那就看一下别人写的代码呗。一看，我了个去，看不明白啊。好吧，整个简单的代码先看看</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">scaleLabel:</span><span class="p">(</span><span class="n">UILabel</span> <span class="o">*</span><span class="p">)</span><span class="nv">label</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">label</span><span class="p">.</span><span class="n">layer</span> <span class="nl">removeAnimationForKey:</span><span class="s">@&quot;transform.scale&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CABasicAnimation</span> <span class="o">*</span><span class="n">pulseAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;transform.scale&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">pulseAnimation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">.3</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pulseAnimation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="mf">1.05</span><span class="p">];</span>
</span><span class='line'>    <span class="n">pulseAnimation</span><span class="p">.</span><span class="n">timingFunction</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAMediaTimingFunction</span> <span class="nl">functionWithName:</span><span class="n">kCAMediaTimingFunctionLinear</span><span class="p">];</span>
</span><span class='line'>    <span class="n">pulseAnimation</span><span class="p">.</span><span class="n">autoreverses</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">label</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation:</span><span class="n">pulseAnimation</span> <span class="nl">forKey:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>它干了什么</h2>

<p>这个代码简单些，大概知道干了什么事，是要进行放大操作，放大到1.05倍，时间0.3s，autoreverses意思是自己恢复，timingFunction的意思在文档里写的我没看懂，英语太次，google了一下，找到一个词，感觉挺形象，elastic function，可以直白的翻译成“松紧函数”，或者说是“弹性函数”。上面代码里用的是kCAMediaTimingFunctionEaseIn，放大动画的运行效果是会先慢后快（渐入），当然如果是EaseInEaseOut，那就是渐入渐出。elastic function这个词我取自<a href="http://stackoverflow.com/questions/5161465/how-to-create-custom-easing-function-with-core-animation">该文章</a>，文章里有自定义elastic function的内容，值得阅读。</p>

<p>对于上面代码有一点要注意：就是首先要先removeAnimationForKey。</p>

<h2>什么时候调用</h2>

<p>当你想让这个label执行一次动画时，就调用一次</p>

<h2>想加多个动画到这个Label上怎么办</h2>

<p>先上一段代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">animationGroup:</span><span class="p">(</span><span class="n">UILabel</span> <span class="o">*</span><span class="p">)</span><span class="nv">label</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">label</span><span class="p">.</span><span class="n">layer</span> <span class="nl">removeAnimationForKey:</span><span class="s">@&quot;animationGroup&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CABasicAnimation</span> <span class="o">*</span><span class="n">pulseAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;transform.scale&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">pulseAnimation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">2.</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pulseAnimation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="mf">1.15</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CABasicAnimation</span> <span class="o">*</span><span class="n">pulseColorAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;backgroundColor&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">pulseColorAnimation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">1.</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pulseColorAnimation</span><span class="p">.</span><span class="n">fillMode</span> <span class="o">=</span> <span class="n">kCAFillModeForwards</span><span class="p">;</span>
</span><span class='line'>    <span class="n">pulseColorAnimation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="p">(</span><span class="kt">id</span><span class="p">)[</span><span class="n">UIColorFromRGBA</span><span class="p">(</span><span class="mh">0xFF0000</span><span class="p">,</span> <span class="mf">.75</span><span class="p">)</span> <span class="n">CGColor</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CABasicAnimation</span> <span class="o">*</span><span class="n">rotateLayerAnimation</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;transform.rotation&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">rotateLayerAnimation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">.5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">rotateLayerAnimation</span><span class="p">.</span><span class="n">beginTime</span> <span class="o">=</span> <span class="mf">.5</span><span class="p">;</span>
</span><span class='line'>    <span class="n">rotateLayerAnimation</span><span class="p">.</span><span class="n">fillMode</span> <span class="o">=</span> <span class="n">kCAFillModeBoth</span><span class="p">;</span>
</span><span class='line'>    <span class="n">rotateLayerAnimation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithFloat:</span><span class="n">DEGREES_TO_RADIANS</span><span class="p">(</span><span class="mf">45.</span><span class="p">)];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CAAnimationGroup</span> <span class="o">*</span><span class="n">group</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAAnimationGroup</span> <span class="n">animation</span><span class="p">];</span>
</span><span class='line'>    <span class="n">group</span><span class="p">.</span><span class="n">animations</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="n">pulseAnimation</span><span class="p">,</span> <span class="n">pulseColorAnimation</span><span class="p">,</span> <span class="n">rotateLayerAnimation</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="n">group</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mf">2.</span><span class="p">;</span>
</span><span class='line'>    <span class="n">group</span><span class="p">.</span><span class="n">timingFunction</span> <span class="o">=</span> <span class="p">[</span><span class="n">CAMediaTimingFunction</span> <span class="nl">functionWithName:</span><span class="n">kCAMediaTimingFunctionEaseInEaseOut</span><span class="p">];</span>
</span><span class='line'>    <span class="n">group</span><span class="p">.</span><span class="n">autoreverses</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="n">group</span><span class="p">.</span><span class="n">repeatCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">label</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addAnimation:</span><span class="n">group</span> <span class="nl">forKey:</span><span class="s">@&quot;animationGroup&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后用一个CAAnimationGroup来管理所有的动画，自己去看一下CAAnimationGroup Class Reference，里面有些注意事项需要注意。</p>

<h2>提出问题</h2>

<p>上面讲的这些都是直接在某个已经存在的view.layer上操作，如果想实现一个类似如下效果该怎么办</p>

<p>解决方法：
&ndash; 以动画所需要的内容创建一个layer
&ndash; 给layer添加一些动画
&ndash; 将layer添加到mainView上
&ndash; 动画结束，删除该layer</p>

<h2>只说解决方法的第一条</h2>

<p>如何创建一个layer，并让该layer显示我们需要的内容，直接上代码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">createLayerWithContent:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">targetView</span> <span class="nf">InCoordinateSystem:</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nv">coordinateSystemView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">targetView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'>    <span class="c1">// 将targetView的内容渲染到context中</span>
</span><span class='line'>    <span class="p">[</span><span class="n">targetView</span><span class="p">.</span><span class="n">layer</span> <span class="nl">renderInContext:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// 从context中取得该图片</span>
</span><span class='line'>    <span class="n">CGImageRef</span> <span class="n">imgRef</span> <span class="o">=</span> <span class="n">CGBitmapContextCreateImage</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// UIImage *contextImage = UIGraphicsGetImageFromCurrentImageContext();</span>
</span><span class='line'>    <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//使用imgRef创建一个layer</span>
</span><span class='line'>    <span class="n">CALayer</span> <span class="o">*</span><span class="n">layer</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CALayer</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">layer</span><span class="p">.</span><span class="n">contents</span> <span class="o">=</span> <span class="p">(</span><span class="n">__bridge</span> <span class="kt">id</span><span class="p">)</span><span class="n">imgRef</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 指定其frame，并添加到coordinateSystemView.layer</span>
</span><span class='line'>    <span class="n">layer</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="p">[</span><span class="n">coordinateSystemView</span> <span class="nl">convertRect:</span><span class="n">targetView</span><span class="p">.</span><span class="n">frame</span> <span class="nl">fromView:</span><span class="n">targetView</span><span class="p">.</span><span class="n">superview</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">coordinateSystemView</span><span class="p">.</span><span class="n">layer</span> <span class="nl">addSublayer:</span><span class="n">transitionLayer</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// TODO: some code to animate the layer</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>targetView就要是展现的动画层，新layer的内容就是从targetView中渲染过来的
coordinateSystemView应该是动画层所在的父view</p>

<p>对于CGContextRef也有很多可以利用的方法，比如裁剪，旋转，绽放，具体自己google
对于CALayer当然也有很多属性，比如设置透明度，背景色等。</p>

<h2>几大动画方式</h2>

<ul>
<li>CABasicAnimation</li>
<li>CAKeyframeAnimation</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">targetView</span><span class="p">.</span><span class="n">frame</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'>    <span class="p">[</span><span class="n">targetView</span><span class="p">.</span><span class="n">layer</span> <span class="nl">renderInContext:</span><span class="n">context</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CGImageRef</span> <span class="n">imgRef</span> <span class="o">=</span> <span class="n">CGBitmapContextCreateImage</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>    <span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>贝赛尔曲线</h2>

<h2>什么时候使用CATransaction</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Core Text (2) Overview]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/06/core-text-overview/"/>
    <updated>2013-06-06T16:18:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/06/core-text-overview</id>
    <content type="html"><![CDATA[<p>Core Text 框架是一个用于文本布局和字体处理的高级的底层技术。专为高性能和易用性而设计，Core Text布局引擎比ATSUI (Apple Type Services for Unicode Imageing).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress配置]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/06/octpress-set-up/"/>
    <updated>2013-06-06T12:30:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/06/octpress-set-up</id>
    <content type="html"><![CDATA[<h2>修改默认的markdown文件</h2>

<p>每次使用rake post时产生的新文件中都有如下格式：</p>

<pre>
layout: post
title: "Octopress配置"
date: 2013-06-06 12:30
comments: true
keywords: octopress     //默认是没有这行的
categories: 
</pre>


<p>如果想自定义这里的内容，比如添加一个key，<!--more-->比如上面的keywords，那么就修改Rakefile，搜索<code>layout:</code>你就知道接下来怎么做了。</p>

<h2>让google search结果显示你的google+头像</h2>

<ul>
<li>在<a href="https://www.google.com.hk/webmasters/tools/richsnippets?q=www.catcrazy.cn&amp;html=">Structured Data Testing Tool</a>中测试是否已经正确设置</li>
<li>在<a href="http://support.google.com/webmasters/bin/answer.py?hl=en&amp;answer=1408986">Author information in search results
</a>中了解更多关于这方面东西</li>
<li>其它方面自己google吧
<img src="testGoogle.png" alt="testGoogle" />
<img src="http://igiu1988.github.io/images/testGoogle.png"></li>
</ul>


<h2>首页只显示正文</h2>

<p>如果你只想让博客首页在显示该博文时只显示到某一处，那就在那儿添加一个<code>&lt;!--more--&gt;</code>。首页会多出一个继续阅读的链接，试一试就知道了。</p>

<h2>我所参考的几个博客</h2>

<ul>
<li><a href="http://www.yanjiuyanjiu.com/blog/20130402/">我的Octopress</a></li>
<li><a href="http://octopress.org/docs/">octopress官方文档</a></li>
<li><a href="http://linyi.herokuapp.com/blog/config-octopress.html">octopress的个性化配置</a></li>
<li><a href="http://whbzju.github.io/blog/2013/03/01/octopress-custom-config/">涉及导航，分类，sina，评论</a></li>
<li><a href="http://khaos.github.io/blog/2012/12/06/using-chinese-category-tags-in-octopress/">Octopress易筋经，中文分类标签</a></li>
<li>[]</li>
</ul>


<h2>迁移你的博客系统</h2>

<ul>
<li><a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Clone Your Octopress to Blog From Two Places</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoreText（1）-介绍]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/05/coretext-introduction/"/>
    <updated>2013-06-05T16:05:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/05/coretext-introduction</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>Core Text是一门为了实现文字排版和控制字体的高级底层技术。它以高性能及易用性为基本标准进行设计。Core Text API适用于OS X v10.5以后版本，在所有的的这些OS X系统应用环境中都可以使用。在iOS3.2及以后版本也同样适用。</p>

<!--more-->


<p>Core Text 布局引擎（layout engine）是专门设计用来使文字布局操作更简单和避免副作用而设计。<font color=green>既然Core Text能够实现文字排版和控制字体，那么它内部就会有布局引擎（布局引擎就是用来实现排版）和字体编程接口（字体编程接口就是用来控制字体的）</font>。Core Text字体编程接口（font programming interface）与Core Text布局引擎是互补的，它们是被设计用于能够原生地处理Unicode编码字体，统一不同的OS X字体设备成一个独立且全面的编程接口。</p>

<p>该文档适用于那些想在底层进行文字布局操作和字体处理的开发者。如果你想使用高封装接口（using higher-level construct）来开发应用，比如NSTextView（<font color=green>这是一个OS X的控件，并不适用于iOS，iOS里有UITextView，不过UITextView照NSTextView差得太多了，只能说UITextView是简单封装，不过在iOS6之后的UITextView就好多了，支持NSAttributedString了</font>），那么你应该使用Cocoa text system，具体介绍可以查看Text System Overview。如果并不想使用高封装接口，你想自己在Core Graphics context上渲染文字，那么你就要使用Core Text。</p>

<h2>文档组织</h2>

<p>该文档以如下章节组织</p>

<p>“Core Text 概述”：该章在设计目的和功能点方面介绍了Core Text system。同样也介绍了系统中中些不透明类型（opaque types），这些类型封装了文字布局和字体处理功能。
“常用操作（Common Operation）”: 提供了一些代码段和注释，用来示例主要的Core Text不透明类型的主要用法。</p>

<h2>参见</h2>

<p>除了这篇文档，还有一些其它的文档覆盖了关于Core Text的更多方面或者描述了Core Text所使用的软件服务。</p>

<ul>
<li>Core Text Reference Collection 为Core Text布局和字体API提供了完整的参考信息.</li>
<li>CoreTextTest 示例项目，它展示了在完整的应用（a complete Carbon application）的内部中如何使用Core Text。</li>
<li>CoreTextArcCocoa 示例项目，它示范了在Core Text Cocoa 应用中如何使用fonts, lines, runs。</li>
<li>Core Foundation Design Concepts 和 Core Foundation Framework Reference 描述了Core Foundation，Core Foundation是一个提供了通用数据类型抽象和Core Text所用到的基本软件服务的框架</li>
</ul>


<p>有关Cocoa Text system</p>

<ul>
<li>Text System Overview介绍了Cocoa text system.</li>
<li>Text Layout Programming Guide for Cocoa讲解了Cocoa text布局引擎</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[准备翻译CoreText]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/05/prepare-to-translate-core-text/"/>
    <updated>2013-06-05T16:03:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/05/prepare-to-translate-core-text</id>
    <content type="html"><![CDATA[<p>TMD，觉得要是在这里竟写一些别人都说过的东西也太没意思了，不过自己也很菜，写不出什么原创，干脆翻译些什么吧。于是乎准备翻译一下Core Text Programming Gudie，把Overview翻译完，就发布博客，要不都没啥原创不敢发布啊。</p>

<!--more-->


<p>英语侥幸过了四级，只比及格线多6分，这两年也没有额外学习英语，翻译出来的东西如果能有幸让大家看到，并且哪怕只是帮助到大家一点点，那我也算积德了。</p>

<p>翻译中加了自己的一些话，我用<font color=green>绿色</font>加以区分，加上自己的一些话是觉得这样写应该更易于理解。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Core Data 入门]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/04/ios-core-data-guide/"/>
    <updated>2013-06-04T15:29:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/04/ios-core-data-guide</id>
    <content type="html"><![CDATA[<p>做了一年多iOS开发，真没怎么用过Core Data，来新公司一直没有活，就看Core Data了。网上一搜一大把关于Core Data的教程，我以我自己的方式重新再说一次，如看不懂就再自己搜索吧。</p>

<h2>注意</h2>

<p>Core Data不是数据库，只是对SQLite的封装，集成了很多内容，并且高效。</p>

<h2>开始</h2>

<p>我新建了一个类，SQLManager : NSObject</p>

<p>添加了一个类方法，目的是全局使用一个SQLManager对象</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">SQLManager</span> <span class="o">*</span><span class="p">)</span><span class="nf">sharedSQLManager</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">dispatch_once_t</span> <span class="n">onceToken</span><span class="p">;</span>
</span><span class='line'>    <span class="k">static</span> <span class="kt">id</span> <span class="n">shareInstance</span><span class="p">;</span>
</span><span class='line'>    <span class="n">dispatch_once</span><span class="p">(</span><span class="o">&amp;</span><span class="n">onceToken</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">shareInstance</span> <span class="o">=</span> <span class="p">[[</span><span class="n">self</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">shareInstance</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Core Data涉及三个对象是肯定每次都要用的的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSManagedObjectModel</span> <span class="o">*</span><span class="n">managedObjectModel</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSManagedObjectContext</span> <span class="o">*</span><span class="n">managedObjectContext</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSPersistentStoreCoordinator</span> <span class="o">*</span><span class="n">persistentStoreCoordinator</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用一个initCoreData来初始化这三个对象（SQLManager的属性）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='objective-c'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initCoreData</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// 既然涉及数据库，肯定要有一个文件来存储数据</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">paths</span> <span class="o">=</span> <span class="n">NSSearchPathForDirectoriesInDomains</span><span class="p">(</span><span class="n">NSDocumentDirectory</span><span class="p">,</span> <span class="n">NSUserDomainMask</span><span class="p">,</span> <span class="n">YES</span><span class="p">);</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">basePath</span> <span class="o">=</span> <span class="p">[</span><span class="n">paths</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">storeUrl</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">fileURLWithPath:</span><span class="p">[</span><span class="n">basePath</span> <span class="nl">stringByAppendingPathComponent:</span><span class="s">@&quot;TestDB.sqlite&quot;</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 初始化 managedObjectModel </span>
</span><span class='line'><span class="cm">     * managedObjectModel 的初始化是依据工程中的xcdatamodeld文件，</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">_managedObjectModel</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSManagedObjectModel</span> <span class="nl">mergedModelFromBundles:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 初始化 persistentStoreCoordinator</span>
</span><span class='line'><span class="cm">     * persistentStoreCoordinator 的初始化需要刚才的 managedObjectModel，这里我添加了一个option，该option会在数据库的版本控制及轻量迁移中用到。</span>
</span><span class='line'><span class="cm">     * 数据库的版本控制及轻量迁移见另一篇文章: iOS Core Data Version</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// option use for lightweight migration</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">option</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObjectsAndKeys:</span>
</span><span class='line'>                             <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="n">NSMigratePersistentStoresAutomaticallyOption</span><span class="p">,</span>
</span><span class='line'>                             <span class="p">[</span><span class="n">NSNumber</span> <span class="nl">numberWithBool:</span><span class="n">YES</span><span class="p">],</span> <span class="n">NSInferMappingModelAutomaticallyOption</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">_persistentStoreCoordinator</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSPersistentStoreCoordinator</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithManagedObjectModel:</span><span class="n">_managedObjectModel</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="n">_persistentStoreCoordinator</span> <span class="nl">addPersistentStoreWithType:</span><span class="n">NSSQLiteStoreType</span> <span class="nl">configuration:</span><span class="nb">nil</span> <span class="nl">URL:</span><span class="n">storeUrl</span> <span class="nl">options:</span><span class="n">option</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@: %@&quot;</span><span class="p">,</span> <span class="p">[[[</span><span class="n">NSBundle</span> <span class="n">mainBundle</span><span class="p">]</span> <span class="n">infoDictionary</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="s">@&quot;CFBundleDisplayName&quot;</span><span class="p">],</span> <span class="n">error</span><span class="p">.</span><span class="n">localizedDescription</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 初始化 managedObjectContext</span>
</span><span class='line'><span class="cm">     * managedObjectContext 的初始化需要上面的 persistentStoreCoordinator</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">_managedObjectContext</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSManagedObjectContext</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">_managedObjectContext</span><span class="p">.</span><span class="n">persistentStoreCoordinator</span> <span class="o">=</span> <span class="n">_persistentStoreCoordinator</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考文档：</p>

<ul>
<li>Core Data Basics</li>
<li>Core Data Programming Gudie</li>
<li>google及baidu的各种搜索</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iMac蓝牙与wifi信号]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/04/bluetooth-and-wifi-in-imac/"/>
    <updated>2013-06-04T13:42:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/04/bluetooth-and-wifi-in-imac</id>
    <content type="html"><![CDATA[<p>在新公司终于使用上了iMac，甚是高兴，可是用着用着发现magic mouse总是掉帧，输入文字时偶尔也会变得很卡，鼠标的问题尤为严重，于是google之，的确有同样的问题。其中有一个帖子说是与其用的wifi信号频道（强度）有关系，于是将iMac连接到了公司的另一个wifi信号上，果然蓝牙设备不再掉帧了。具体原因我说不清，只提供一些证据</p>

<ul>
<li>iMac型号MD093CH/A，使用的无线芯片是Broadcom BCM43xx，集成了wifi与bluetooth</li>
<li>先前的wifi信号强度是-52dBm，后来的wifi信号强度是-26dBm</li>
<li>查看蓝牙设备的RSSI，基本都在-52dBm上下波动</li>
</ul>

]]></content>
  </entry>
  
</feed>
