<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 研究研究 | 胖子汪洋的博客]]></title>
  <link href="http://igiu1988.github.io/blog/categories/yan-jiu-yan-jiu/atom.xml" rel="self"/>
  <link href="http://igiu1988.github.io/"/>
  <updated>2013-11-05T14:45:59+08:00</updated>
  <id>http://igiu1988.github.io/</id>
  <author>
    <name><![CDATA[汪洋]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Core Animation Notes 1]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/28/core-animation-notes-1/"/>
    <updated>2013-06-28T08:49:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/28/core-animation-notes-1</id>
    <content type="html"><![CDATA[<h2>废话</h2>

<p>看Core Animation相关的例子不下10次，只有最近一次才看得算是明白，然后又看了一点文档。我不是什么爱学习的人，也不想特意去先学习点什么东西以便留着以后用。我只是碰到了，我就看，看不明白拉倒，哪天碰到了再看，总有一天能看明白。</p>

<p>瞅了一眼Core Animation Basics，看完就忘记了，不得已一边再看一遍文档，一边写文章了。</p>

<h2>上一段代码</h2>

<p>经常的，想实现一个动画，或者只是想看看这个动画怎么写的布局，那就看一下别人写的代码呗。一看，我了个去，看不明白啊。好吧，整个简单的代码先看看</p>

<p>```objective-c
&ndash; (void)scaleLabel:(UILabel *)label
{</p>

<pre><code>[label.layer removeAnimationForKey:@"transform.scale"];

CABasicAnimation *pulseAnimation = [CABasicAnimation animationWithKeyPath:@"transform.scale"];
pulseAnimation.duration = .3;
pulseAnimation.toValue = [NSNumber numberWithFloat:1.05];
pulseAnimation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionLinear];
pulseAnimation.autoreverses = YES;

[label.layer addAnimation:pulseAnimation forKey:nil];
</code></pre>

<p>}
```</p>

<!--more-->


<h2>它干了什么</h2>

<p>这个代码简单些，大概知道干了什么事，是要进行放大操作，放大到1.05倍，时间0.3s，autoreverses意思是自己恢复，timingFunction的意思在文档里写的我没看懂，英语太次，google了一下，找到一个词，感觉挺形象，elastic function，可以直白的翻译成“松紧函数”，或者说是“弹性函数”。上面代码里用的是kCAMediaTimingFunctionEaseIn，放大动画的运行效果是会先慢后快（渐入），当然如果是EaseInEaseOut，那就是渐入渐出。elastic function这个词我取自<a href="http://stackoverflow.com/questions/5161465/how-to-create-custom-easing-function-with-core-animation">该文章</a>，文章里有自定义elastic function的内容，值得阅读。</p>

<p>对于上面代码有一点要注意：就是首先要先removeAnimationForKey。</p>

<h2>什么时候调用</h2>

<p>当你想让这个label执行一次动画时，就调用一次</p>

<h2>想加多个动画到这个Label上怎么办</h2>

<p>先上一段代码</p>

<p>``` objective-c
&ndash; (void)animationGroup:(UILabel *)label
{</p>

<pre><code>[label.layer removeAnimationForKey:@"animationGroup"];

CABasicAnimation *pulseAnimation = [CABasicAnimation animationWithKeyPath:@"transform.scale"];
pulseAnimation.duration = 2.;
pulseAnimation.toValue = [NSNumber numberWithFloat:1.15];

CABasicAnimation *pulseColorAnimation = [CABasicAnimation animationWithKeyPath:@"backgroundColor"];
pulseColorAnimation.duration = 1.;
pulseColorAnimation.fillMode = kCAFillModeForwards;
pulseColorAnimation.toValue = (id)[UIColorFromRGBA(0xFF0000, .75) CGColor];

CABasicAnimation *rotateLayerAnimation = [CABasicAnimation animationWithKeyPath:@"transform.rotation"];
rotateLayerAnimation.duration = .5;
rotateLayerAnimation.beginTime = .5;
rotateLayerAnimation.fillMode = kCAFillModeBoth;
rotateLayerAnimation.toValue = [NSNumber numberWithFloat:DEGREES_TO_RADIANS(45.)];

CAAnimationGroup *group = [CAAnimationGroup animation];
group.animations = [NSArray arrayWithObjects:pulseAnimation, pulseColorAnimation, rotateLayerAnimation, nil];
group.duration = 2.;
group.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseInEaseOut];
group.autoreverses = YES;
group.repeatCount = 0;

[label.layer addAnimation:group forKey:@"animationGroup"];
</code></pre>

<p>}
```</p>

<p>最后用一个CAAnimationGroup来管理所有的动画，自己去看一下CAAnimationGroup Class Reference，里面有些注意事项需要注意。</p>

<h2>提出问题</h2>

<p>上面讲的这些都是直接在某个已经存在的view.layer上操作，如果想实现一个类似如下效果该怎么办</p>

<p>解决方法：
&ndash; 以动画所需要的内容创建一个layer
&ndash; 给layer添加一些动画
&ndash; 将layer添加到mainView上
&ndash; 动画结束，删除该layer</p>

<h2>只说解决方法的第一条</h2>

<p>如何创建一个layer，并让该layer显示我们需要的内容，直接上代码
``` objective-c
&ndash; (void)createLayerWithContent:(UIView <em>)targetView InCoordinateSystem:(UIView </em>)coordinateSystemView
{</p>

<pre><code>UIGraphicsBeginImageContext(targetView.frame.size);
CGContextRef context = UIGraphicsGetCurrentContext();
// 将targetView的内容渲染到context中
[targetView.layer renderInContext:context];
// 从context中取得该图片
CGImageRef imgRef = CGBitmapContextCreateImage(context);    
// UIImage *contextImage = UIGraphicsGetImageFromCurrentImageContext();
UIGraphicsEndImageContext();

//使用imgRef创建一个layer
CALayer *layer = [[CALayer alloc] init];
layer.contents = (__bridge id)imgRef;

// 指定其frame，并添加到coordinateSystemView.layer
layer.frame = [coordinateSystemView convertRect:targetView.frame fromView:targetView.superview];
[coordinateSystemView.layer addSublayer:transitionLayer];


// TODO: some code to animate the layer
</code></pre>

<p>}</p>

<p>```
targetView就要是展现的动画层，新layer的内容就是从targetView中渲染过来的
coordinateSystemView应该是动画层所在的父view</p>

<p>对于CGContextRef也有很多可以利用的方法，比如裁剪，旋转，绽放，具体自己google
对于CALayer当然也有很多属性，比如设置透明度，背景色等。</p>

<h2>几大动画方式</h2>

<ul>
<li>CABasicAnimation</li>
<li>CAKeyframeAnimation
``` objective-c
UIGraphicsBeginImageContext(targetView.frame.size);
  CGContextRef context = UIGraphicsGetCurrentContext();
  [targetView.layer renderInContext:context];
  CGImageRef imgRef = CGBitmapContextCreateImage(context);
  UIGraphicsEndImageContext();</li>
</ul>


<p>```</p>

<h2>贝赛尔曲线</h2>

<h2>什么时候使用CATransaction</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress配置]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/06/octpress-set-up/"/>
    <updated>2013-06-06T12:30:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/06/octpress-set-up</id>
    <content type="html"><![CDATA[<h2>修改默认的markdown文件</h2>

<p>每次使用rake post时产生的新文件中都有如下格式：</p>

<pre>
layout: post
title: "Octopress配置"
date: 2013-06-06 12:30
comments: true
keywords: octopress     //默认是没有这行的
categories: 
</pre>


<p>如果想自定义这里的内容，比如添加一个key，<!--more-->比如上面的keywords，那么就修改Rakefile，搜索<code>layout:</code>你就知道接下来怎么做了。</p>

<h2>让google search结果显示你的google+头像</h2>

<ul>
<li>在<a href="https://www.google.com.hk/webmasters/tools/richsnippets?q=www.catcrazy.cn&amp;html=">Structured Data Testing Tool</a>中测试是否已经正确设置</li>
<li>在<a href="http://support.google.com/webmasters/bin/answer.py?hl=en&amp;answer=1408986">Author information in search results
</a>中了解更多关于这方面东西</li>
<li>其它方面自己google吧
<img src="testGoogle.png" alt="testGoogle" />
<img src="/images/testGoogle.png"></li>
</ul>


<h2>首页只显示正文</h2>

<p>如果你只想让博客首页在显示该博文时只显示到某一处，那就在那儿添加一个<code>&lt;!--more--&gt;</code>。首页会多出一个继续阅读的链接，试一试就知道了。</p>

<h2>我所参考的几个博客</h2>

<ul>
<li><a href="http://www.yanjiuyanjiu.com/blog/20130402/">我的Octopress</a></li>
<li><a href="http://octopress.org/docs/">octopress官方文档</a></li>
<li><a href="http://linyi.herokuapp.com/blog/config-octopress.html">octopress的个性化配置</a></li>
<li><a href="http://whbzju.github.io/blog/2013/03/01/octopress-custom-config/">涉及导航，分类，sina，评论</a></li>
<li><a href="http://khaos.github.io/blog/2012/12/06/using-chinese-category-tags-in-octopress/">Octopress易筋经，中文分类标签</a></li>
<li>[]</li>
</ul>


<h2>迁移你的博客系统</h2>

<ul>
<li><a href="http://blog.zerosharp.com/clone-your-octopress-to-blog-from-two-places/">Clone Your Octopress to Blog From Two Places</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Core Data 入门]]></title>
    <link href="http://igiu1988.github.io/blog/2013/06/04/ios-core-data-guide/"/>
    <updated>2013-06-04T15:29:00+08:00</updated>
    <id>http://igiu1988.github.io/blog/2013/06/04/ios-core-data-guide</id>
    <content type="html"><![CDATA[<p>做了一年多iOS开发，真没怎么用过Core Data，来新公司一直没有活，就看Core Data了。网上一搜一大把关于Core Data的教程，我以我自己的方式重新再说一次，如看不懂就再自己搜索吧。</p>

<h2>注意</h2>

<p>Core Data不是数据库，只是对SQLite的封装，集成了很多内容，并且高效。</p>

<h2>开始</h2>

<p>我新建了一个类，SQLManager : NSObject</p>

<p>添加了一个类方法，目的是全局使用一个SQLManager对象</p>

<!--more-->


<p>```objective-c
+ (SQLManager *)sharedSQLManager
{</p>

<pre><code>static dispatch_once_t onceToken;
static id shareInstance;
dispatch_once(&amp;onceToken, ^{
    shareInstance = [[self alloc] init];
});

return shareInstance;
</code></pre>

<p>}
```</p>

<p>Core Data涉及三个对象是肯定每次都要用的的</p>

<p><code>objective-c
@property (nonatomic, strong) NSManagedObjectModel *managedObjectModel;
@property (nonatomic, strong) NSManagedObjectContext *managedObjectContext;
@property (nonatomic, strong) NSPersistentStoreCoordinator *persistentStoreCoordinator;
</code></p>

<p>使用一个initCoreData来初始化这三个对象（SQLManager的属性）
```objective-c
&ndash; (void)initCoreData
{</p>

<pre><code>// 既然涉及数据库，肯定要有一个文件来存储数据
NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
NSString *basePath = [paths objectAtIndex:0];
NSURL *storeUrl = [NSURL fileURLWithPath:[basePath stringByAppendingPathComponent:@"TestDB.sqlite"]];

/* 初始化 managedObjectModel 
 * managedObjectModel 的初始化是依据工程中的xcdatamodeld文件，
 */
_managedObjectModel = [NSManagedObjectModel mergedModelFromBundles:nil];

/* 初始化 persistentStoreCoordinator
 * persistentStoreCoordinator 的初始化需要刚才的 managedObjectModel，这里我添加了一个option，该option会在数据库的版本控制及轻量迁移中用到。
 * 数据库的版本控制及轻量迁移见另一篇文章: iOS Core Data Version
 */
NSError *error;
// option use for lightweight migration
NSDictionary * option = [NSDictionary dictionaryWithObjectsAndKeys:
                         [NSNumber numberWithBool:YES], NSMigratePersistentStoresAutomaticallyOption,
                         [NSNumber numberWithBool:YES], NSInferMappingModelAutomaticallyOption, nil];

_persistentStoreCoordinator = [[NSPersistentStoreCoordinator alloc] initWithManagedObjectModel:_managedObjectModel];
if (![_persistentStoreCoordinator addPersistentStoreWithType:NSSQLiteStoreType configuration:nil URL:storeUrl options:option error:&amp;error]) {
    NSLog(@"%@: %@", [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleDisplayName"], error.localizedDescription);
}

/* 初始化 managedObjectContext
 * managedObjectContext 的初始化需要上面的 persistentStoreCoordinator
 */
_managedObjectContext = [[NSManagedObjectContext alloc] init];
_managedObjectContext.persistentStoreCoordinator = _persistentStoreCoordinator;
</code></pre>

<p>}
```</p>

<p>参考文档：</p>

<ul>
<li>Core Data Basics</li>
<li>Core Data Programming Gudie</li>
<li>google及baidu的各种搜索</li>
</ul>

]]></content>
  </entry>
  
</feed>
